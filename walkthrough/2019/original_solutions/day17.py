#!/usr/bin/env python3

from utils.all import *

fin = advent.get_input()
# eprint(*fin, sep='')
timer_start()

##################################################

from lib.intcode import IntcodeVM
prog = get_ints(fin, True)
vm = IntcodeVM(prog)

def vm_write(v):
	if 0 <= v <= 0x7f:
		sys.stderr.write(chr(v))
	else:
		print('==================== NON ASCII:', v)

# Dump initial grid
# vm.write = vm_write
# vm.run()

grid = [
	'........#######..........................',
	'........#.....#..........................',
	'........#.....#..........................',
	'........#.....#..........................',
	'......###########........................',
	'......#.#.....#.#........................',
	'......#.#.....#######....................',
	'......#.#.......#...#....................',
	'......#.#.....###########................',
	'......#.#.....#.#...#...#................',
	'#######.#########...#...#.....#..........',
	'#.............#.....#...#.....#..........', # 'R,6,L,6,L,10,L,8,L,6',
	'#.............#.....#...#.....#..........', # 'L,10,L,6,R,6,L,6',
	'#.............#.....#...#.....#..........', # 'L,10,L,8,L,6,L,10',
	'#.............#...^######.....#..........', # 'L,6,R,6,L,8,L,10',
	'#.............#.....#.........#..........', # 'R,6,R,6,L,6,L,10',
	'#.............#######.........###########', # 'L,8,L,6,L,10,L,6',
	'#.......................................#', # 'R,6,L,8,L,10,R,6',
	'###########.............................#', # 'R,6,L,6,L,10,R,6',
	'..........#.............................#', # 'L,8,L,10,R,6',
	'..........#.............................#',
	'..........#.............................#',
	'........#######.........................#',
	'........#.#...#.........................#',
	'....#######...#...................#######',
	'....#...#.....#...................#......',
	'....#...#.....#...................#......',
	'....#...#.....#...................#......',
	'....#...#.....#.......#######.....#......',
	'....#...#.....#.......#.....#.....#......',
	'....###########.......#.....#.....#......',
	'........#.............#.....#.....#......',
	'........#######.......#.....#.....#......',
	'..............#.......#.....#.....#......',
	'..............#.......#.....#######......',
	'..............#.......#..................',
	'..............#.......#..................',
	'..............#.......#..................',
	'..............#########..................',
]

intersections = set()

for y, l in enumerate(grid):
	for x, c in enumerate(l):
		if c == '#':
			ok = True
			for dx, dy in ((1, 0), (-1, 0), (0, 1), (0, -1)):
				xx, yy = x + dx, y + dy
				if 0 <= yy < len(grid) and 0 <= xx < len(l) and grid[yy][xx] !='#':
					ok = False
					break

			if ok:
				intersections.add((x, y))

# print(intersections)

ans = sum(x*y for x,y in intersections)
advent.submit_answer(1, ans)


def vm_write2(v):
	if v > 0x7f:
		# print('----', v, '----')
		advent.submit_answer(2, v)

vm.reset()
vm.code[0] = 2
vm.write = vm_write2

main = 'R,6,L,6,L,10,L,8,L,6,L,10,L,6,R,6,L,6,L,10,L,8,L,6,L,10,L,6,R,6,L,8,L,10,R,6,R,6,L,6,L,10,L,8,L,6,L,10,L,6,R,6,L,8,L,10,R,6,R,6,L,6,L,10,R,6,L,8,L,10,R,6'

# Compress above program by hand...
main = 'A,B,A,B,C,A,B,C,A,C'

funcs = [
	'R,6,L,6,L,10',
	'L,8,L,6,L,10,L,6',
	'R,6,L,8,L,10,R,6',
]

subs = '\n'.join(funcs)
debug = 'n'

robot_prog = list(map(ord, '{}\n{}\n{}\n'.format(main, subs, debug)))

vm.run(robot_prog)


